#!/usr/bin/python
# -*- coding: utf-8 -*-

# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# DOCUMENTATION, EXAMPLES, and RETURN are generated by
# ansible_specdoc. Do not edit them directly.

DOCUMENTATION = r"""
author: Equinix DevRel Team (@equinix) <support@equinix.com>
description: Gather information about Equinix Metal organizations
module: metal_organization_info
notes: []
options:
  personal:
    description:
    - If true, only personal organizations will be returned.
    required: false
    type: bool
  without_projects:
    description:
    - If true, only organizations without projects will be returned.
    required: false
    type: bool
requirements: null
short_description: Gather information about Equinix Metal organizations
"""
EXAMPLES = r"""
- name: Gather information about all organizations
  hosts: localhost
  tasks:
  - equinix.cloud.metal_organization_info: null
- name: Gather information about organizations without projects
  hosts: localhost
  tasks:
  - equinix.cloud.metal_organization_info:
      without_projects: true
- name: filter organizations
  hosts: localhost
  tasks:
  - equinix.cloud.metal_organization_info: null
    register: organizations
  set_fact:
    ansible_orgs: '{{ organizations.resources | selectattr(''name'', ''match'', desired_name_substring)
      }}'
"""
RETURN = r"""
resources:
  description: Found organizations
  returned: always
  sample:
  - description: ''
    id: 72342434-9423-454e-8423-ab6546461d99
    name: "Tomas\u2019 Projects"
    projects:
    - 43767515-846c-46ed-b0f5-23423422ea06
    - 635673f1-bce5-4a62-a47c-133342342349
    website: ''
  type: dict
"""

# End

from ansible.module_utils._text import to_native
from ansible_specdoc.objects import SpecField, FieldType, SpecReturnValue
import traceback

from ansible_collections.equinix.cloud.plugins.module_utils.equinix import (
    EquinixModule,
    getSpecDocMeta,
)

module_spec = dict(
    personal=SpecField(
        type=FieldType.bool,
        description=['If true, only personal organizations will be returned.'],
    ),
    without_projects=SpecField(
        type=FieldType.bool,
        description=['If true, only organizations without projects will be returned.'],
    ),
)

specdoc_examples = ['''
- name: Gather information about all organizations
  hosts: localhost
  tasks:
      - equinix.cloud.metal_organization_info:
''', '''
- name: Gather information about organizations without projects
  hosts: localhost
  tasks:
      - equinix.cloud.metal_organization_info:
            without_projects: true
''', '''
- name: Get IDs or organizations with "ansible" in name
  hosts: localhost
  tasks:
      - equinix.cloud.metal_organization_info:
        register: organizations

  name: filter organizations
  set_fact:
      ansible_orgs: "{{ organizations.resources | selectattr('name', 'match', desired_name_substring) }}"
''',
                    ]

return_values = [
    {
        "description": "",
        "id": "72342434-9423-454e-8423-ab6546461d99",
        "name": "Tomasâ€™ Projects",
        "projects": [
            "43767515-846c-46ed-b0f5-23423422ea06",
            "635673f1-bce5-4a62-a47c-133342342349",
        ],
        "website": ""
    }
]

SPECDOC_META = getSpecDocMeta(
    short_description="Gather information about Equinix Metal organizations",
    description=(
        'Gather information about Equinix Metal organizations'
    ),
    examples=specdoc_examples,
    options=module_spec,
    return_values={
        "resources": SpecReturnValue(
            description='Found organizations',
            type=FieldType.dict,
            sample=return_values,
        ),
    },
)


def main():
    module = EquinixModule(
        argument_spec=SPECDOC_META.ansible_spec,
        is_info=True,
    )
    try:
        module.params_syntax_check()
        return_value = {'resources': module.get_list("metal_organization")}
    except Exception as e:
        tr = traceback.format_exc()
        module.fail_json(msg=to_native(e), exception=tr)
    module.exit_json(**return_value)


if __name__ == '__main__':
    main()
