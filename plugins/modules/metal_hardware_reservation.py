#!/usr/bin/python
# -*- coding: utf-8 -*-

# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# DOCUMENTATION, EXAMPLES, and RETURN are generated by
# ansible_specdoc. Do not edit them directly.

DOCUMENTATION = r"""
author: Equinix DevRel Team (@equinix) <support@equinix.com>
description: Lookup a single hardware_reservation by ID in Equinix Metal. This resource
  only fetches a single hardware_reservation by resource ID. It doesn't allow to create
  or update hardware_reservations.
module: metal_hardware_reservation
notes: []
options:
  id:
    description:
    - UUID of the hardware_reservation.
    required: true
    type: str
  project_id:
    description:
    - UUID of parent project containing the hardware_reservation. It can be changed.
    required: false
    type: str
requirements: null
short_description: Lookup a single hardware_reservation by ID in Equinix Metal
"""
EXAMPLES = r"""
- name: Lookup a single hardware_reservation by id
  hosts: localhost
  tasks:
  - equinix.cloud.metal_hardware_reservation:
      id: 7624f0f7-75b6-4271-bc64-632b80f87de2
- name: fetch hw reservation resource
  equinix.cloud.metal_hardware_reservation:
    id: '{{ metal_hardware_reservation_id }}'
    register: hwres
- name: create new project to move the hw res to
  equinix.cloud.metal_project:
    name: destination-project
    register: project
- name: move hw reservation to new project
  equinix.cloud.metal_hardware_reservation:
    id: '{{ metal_hardware_reservation_id }}'
    project_id: '{{ project.id }}'
- name: move hw reservation to original project
  equinix.cloud.metal_hardware_reservation:
    id: '{{ metal_hardware_reservation_id }}'
    project_id: '{{ hwres.project_id }}'
"""
RETURN = r"""
metal_hardware_reservation:
  description: The module object
  returned: always
  sample:
  - changed: false
    device_id: ''
    id: 82323c08-a7f5-4e09-8b34-634e82e527c1
    plan: m3.small.x86
    project_id: 52436fb2-ee46-4673-93a8-de2c2bdba33b
    provisionable: true
    spare: false
    switch_uuid: 00a5dbb7
  type: dict
"""

# End of generated documentation

from ansible.module_utils._text import to_native
from ansible_specdoc.objects import (
    SpecField,
    FieldType,
    SpecReturnValue,
)
import traceback

from ansible_collections.equinix.cloud.plugins.module_utils.equinix import (
    EquinixModule,
    get_diff,
    getSpecDocMeta,
)


module_spec = dict(
    id=SpecField(
        type=FieldType.string,
        required=True,
        description=['UUID of the hardware_reservation.'],
    ),
    project_id=SpecField(
        type=FieldType.string,
        description=["UUID of parent project containing the hardware_reservation. It can be changed."],
        required=False,
        editable=True,
    ),
)


specdoc_examples = [
    '''
- name: Lookup a single hardware_reservation by id
  hosts: localhost
  tasks:
  - equinix.cloud.metal_hardware_reservation:
      id: 7624f0f7-75b6-4271-bc64-632b80f87de2
''',
'''
# Move hardware reservation between projects
- name: fetch hw reservation resource 
  equinix.cloud.metal_hardware_reservation:
    id: "{{ metal_hardware_reservation_id }}"
    register: hwres

- name: create new project to move the hw res to
  equinix.cloud.metal_project:
    name: "destination-project"
    register: project

- name: move hw reservation to new project
  equinix.cloud.metal_hardware_reservation:
    id: "{{ metal_hardware_reservation_id }}"
    project_id: "{{ project.id }}"

- name: move hw reservation to original project
  equinix.cloud.metal_hardware_reservation:
    id: "{{ metal_hardware_reservation_id }}"
    project_id: "{{ hwres.project_id }}"     
'''
]

return_values = [
{
    "changed": False,
    "device_id": "",
    "id": "82323c08-a7f5-4e09-8b34-634e82e527c1",
    "plan": "m3.small.x86",
    "project_id": "52436fb2-ee46-4673-93a8-de2c2bdba33b",
    "provisionable": True,
    "spare": False,
    "switch_uuid": "00a5dbb7"
}
]

SPECDOC_META = getSpecDocMeta(
    short_description='Lookup a single hardware_reservation by ID in Equinix Metal',
    description=(
        'Lookup a single hardware_reservation by ID in Equinix Metal. '
        'This resource only fetches a single hardware_reservation by resource ID. '
        "It doesn't allow to create or update hardware_reservations."
    ),
    examples=specdoc_examples,
    options=module_spec,
    return_values={
        "metal_hardware_reservation": SpecReturnValue(
            description='The module object',
            type=FieldType.dict,
            sample=return_values,
        ),
    },
)

MUTABLE_ATTRIBUTES = [a for a, v in module_spec.items() if v.editable]

def main():
    module = EquinixModule(
        argument_spec=SPECDOC_META.ansible_spec,
    )

    state = module.params.get("state")
    if state == "absent":
        module.fail_json(msg="absent state is not supported in this module")
    changed = False

    try:
        module.params_syntax_check()
        fetched = module.get_by_id("metal_hardware_reservation", False)
        diff = get_diff(module.params, fetched, MUTABLE_ATTRIBUTES)
        if diff:
            fetched = module.update_by_id(diff, "metal_hardware_reservation")
            changed = True
        if fetched:
            module.params['id'] = fetched['id']
        else:
            module.fail_json(msg="hardware_reservation not found")
    except Exception as e:
        tb = traceback.format_exc()
        module.fail_json(msg="Error in metal_hardware_reservation: {0}".format(to_native(e)),
                         exception=tb)

    fetched.update({'changed': changed})
    module.exit_json(**fetched)


if __name__ == '__main__':
    main()

