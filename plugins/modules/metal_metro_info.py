#!/usr/bin/python
# -*- coding: utf-8 -*-

# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# DOCUMENTATION, EXAMPLES, and RETURN are generated by
# ansible_specdoc. Do not edit them directly.

DOCUMENTATION = r"""
author: Equinix DevRel Team (@equinix) <support@equinix.com>
description: Gather information about Equinix Metal metros
module: metal_metro_info
notes: []
options: {}
requirements: null
short_description: Gather information about Equinix Metal metros
"""
EXAMPLES = r"""
- name: Select all metros and filter american metros
  hosts: localhost
  tasks:
  - name: Select all metros
    equinix.cloud.metal_metro_info: null
    register: metros
  - name: Store american metros to fact ametros
    set_fact:
      ametros: '{{ metros.resources | selectattr(''country'', ''equalto'', ''US'')
        | list }}'
"""
RETURN = r"""
resources:
  description: Found metros
  returned: always
  sample:
  - code: sv
    country: US
    id: 2991b022-b8c4-497e-8db7-5a407c3a209b
    name: Silicon Valley
  - code: la
    country: US
    id: bb059cc0-0b2a-4f5b-8a55-219e6b4240da
    name: Los Angeles
  - code: ch
    country: US
    id: 60666d92-e00f-43a8-a9f8-fddf665390ca
    name: Chicago
  - code: da
    country: US
    id: d3d6b29f-042d-43b7-b3ce-0bf53d5754ca
    name: Dallas
  type: dict
"""

# End

from ansible.module_utils._text import to_native
from ansible_specdoc.objects import SpecField, FieldType, SpecReturnValue
import traceback

from ansible_collections.equinix.cloud.plugins.module_utils.equinix import (
    EquinixModule,
    getSpecDocMeta,
)

module_spec = dict()

specdoc_examples = ['''
- name: Select all metros and filter american metros
  hosts: localhost
  tasks:
    - name: Select all metros
      equinix.cloud.metal_metro_info:
      register: metros

    - name: Store american metros to fact ametros
      set_fact:
        ametros: "{{ metros.resources | selectattr('country', 'equalto', 'US') | list }}"
''',
]

return_values = [
    {
        "code": "sv",
        "country": "US",
        "id": "2991b022-b8c4-497e-8db7-5a407c3a209b",
        "name": "Silicon Valley"
    },
    {
        "code": "la",
        "country": "US",
        "id": "bb059cc0-0b2a-4f5b-8a55-219e6b4240da",
        "name": "Los Angeles"
    },
    {
        "code": "ch",
        "country": "US",
        "id": "60666d92-e00f-43a8-a9f8-fddf665390ca",
        "name": "Chicago"
    },
    {
        "code": "da",
        "country": "US",
        "id": "d3d6b29f-042d-43b7-b3ce-0bf53d5754ca",
        "name": "Dallas"
    }
]

SPECDOC_META = getSpecDocMeta(
    short_description="Gather information about Equinix Metal metros",
    description=(
        'Gather information about Equinix Metal metros'
    ),
    examples=specdoc_examples,
    options=module_spec,
    return_values={
        "resources": SpecReturnValue(
            description='Found metros',
            type=FieldType.dict,
            sample=return_values,
        ),
    },
)


def main():
    module = EquinixModule(
        argument_spec=SPECDOC_META.ansible_spec,
        is_info=True,
    )
    try:
        module.params_syntax_check()
        return_value = {'resources': module.get_list("metal_metro")}
    except Exception as e:
        tr = traceback.format_exc()
        module.fail_json(msg=to_native(e), exception=tr)
    module.exit_json(**return_value)


if __name__ == '__main__':
    main()
