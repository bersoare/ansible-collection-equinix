#!/usr/bin/python
# -*- coding: utf-8 -*-

# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# DOCUMENTATION, EXAMPLES, and RETURN are generated by
# ansible_specdoc. Do not edit them directly.

DOCUMENTATION = r"""
author: Equinix DevRel Team (@equinix) <support@equinix.com>
description: Gather information about Operating Systems available in Equinix Metal
module: metal_operating_system_info
notes: []
options: {}
requirements: null
short_description: Gather information about Operating Systems available for devices
  in Equinix Metal
"""
EXAMPLES = r"""
- name: Select all operating_systems and filter Ubuntu-based distros
  hosts: localhost
  tasks:
  - name: Select all operating_systems
    equinix.cloud.metal_operating_system_info: null
    register: operating_systems
  - name: Store Ubuntu operating_systems to fact uoss
    set_fact:
      uoss: '{{ operating_systems.resources | selectattr(''distro'', ''equalto'',
        ''ubuntu'') | list }}'
"""
RETURN = r"""
resources:
  description: Found Operating Systems
  returned: always
  sample:
  - distro: windows
    distro_label: Windows
    id: 897c6a00-4fb7-4bc6-80db-83478e1ce1ba
    licensed: true
    name: Windows 2019 Standard
    preinstallable: false
    pricing:
      hour:
        multiplier: cores
        price: 0.01
    provisionable_on:
    - c2.medium.x86
    - c3.medium.opt-c1
    slug: windows_2019
    version: '2019'
  - distro: windows
    distro_label: Windows
    id: fefd6fa7-6f6e-46eb-918b-6839f5ca59cf
    licensed: true
    name: Windows 2022 Standard
    preinstallable: false
    pricing:
      hour:
        multiplier: cores
        price: 0.01
    provisionable_on:
    - c2.medium.x86
    - c3.medium.opt-c1
    slug: windows_2022
    version: '2022'
  type: dict
"""

# End

from ansible.module_utils._text import to_native
from ansible_specdoc.objects import FieldType, SpecReturnValue
import traceback

from ansible_collections.equinix.cloud.plugins.module_utils.equinix import (
    EquinixModule,
    getSpecDocMeta,
)

module_spec = dict()

specdoc_examples = ['''
- name: Select all operating_systems and filter Ubuntu-based distros
  hosts: localhost
  tasks:
    - name: Select all operating_systems
      equinix.cloud.metal_operating_system_info:
      register: operating_systems

    - name: Store Ubuntu operating_systems to fact uoss
      set_fact:
        uoss: "{{ operating_systems.resources | selectattr('distro', 'equalto', 'ubuntu') | list }}"
''',
]

return_values = [
    {
        "distro": "windows",
        "distro_label": "Windows",
        "id": "897c6a00-4fb7-4bc6-80db-83478e1ce1ba",
        "licensed": True,
        "name": "Windows 2019 Standard",
        "preinstallable": False,
        "pricing": {
            "hour": {
                "multiplier": "cores",
                "price": 0.01
            }
        },
        "provisionable_on": [
            "c2.medium.x86",
            "c3.medium.opt-c1",
        ],
        "slug": "windows_2019",
        "version": "2019"
    },
    {
        "distro": "windows",
        "distro_label": "Windows",
        "id": "fefd6fa7-6f6e-46eb-918b-6839f5ca59cf",
        "licensed": True,
        "name": "Windows 2022 Standard",
        "preinstallable": False,
        "pricing": {
            "hour": {
                "multiplier": "cores",
                "price": 0.01
            }
        },
        "provisionable_on": [
            "c2.medium.x86",
            "c3.medium.opt-c1",
        ],
        "slug": "windows_2022",
        "version": "2022"
    }
]

SPECDOC_META = getSpecDocMeta(
    short_description="Gather information about Operating Systems available for devices in Equinix Metal",
    description=(
        'Gather information about Operating Systems available in Equinix Metal'
    ),
    examples=specdoc_examples,
    options=module_spec,
    return_values={
        "resources": SpecReturnValue(
            description='Found Operating Systems',
            type=FieldType.dict,
            sample=return_values,
        ),
    },
)


def main():
    module = EquinixModule(
        argument_spec=SPECDOC_META.ansible_spec,
        is_info=True,
    )
    try:
        module.params_syntax_check()
        return_value = {'resources': module.get_list("metal_operating_system")}
    except Exception as e:
        tr = traceback.format_exc()
        module.fail_json(msg=to_native(e), exception=tr)
    module.exit_json(**return_value)


if __name__ == '__main__':
    main()
