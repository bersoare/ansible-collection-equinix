#!/usr/bin/python
# -*- coding: utf-8 -*-

# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

# DOCUMENTATION, EXAMPLES, and RETURN are generated by
# ansible_specdoc. Do not edit them directly.

DOCUMENTATION = r"""
author: Equinix DevRel Team (@equinix) <support@equinix.com>
description: Gather information about Interconnections
module: metal_connection_info
notes: []
options:
  name:
    description:
    - Filter connections on substring in name attribute.
    required: false
    type: str
  organization_id:
    description:
    - ID of the organization where the connection is scoped to.
    required: false
    type: str
  project_id:
    description:
    - ID of the project where the connection is scoped to.
    required: false
    type: str
requirements: null
short_description: Gather information about Interconnections
"""
EXAMPLES = r"""
- name: Gather information about all connection in a project
  hosts: localhost
  tasks:
  - equinix.cloud.metal_connection_info:
      project_id: 2a5122b9-c323-4d5c-b53c-9ad3f54273e7
"""
RETURN = r"""
resources:
  description: Found resources
  returned: always
  sample:
  - id: 31d3ae8b-bd5a-41f3-a420-055211345cc7
    metro: am
    name: my_test_connection
    project_id: 845b45a3-c565-47e5-b9b6-a86204a73d29
    redundancy: primary
    speed: 50Mbps
    type: dedicated
  type: dict
"""

# End

from ansible.module_utils._text import to_native
from ansible_specdoc.objects import SpecField, FieldType, SpecReturnValue
import traceback

from ansible_collections.equinix.cloud.plugins.module_utils.equinix import (
    EquinixModule,
    getSpecDocMeta,
)

module_spec = dict(
    name=SpecField(
        type=FieldType.string,
        description=["Filter connections on substring in name attribute."],
    ),
    project_id=SpecField(
        type=FieldType.string,
        description=["ID of the project where the connection is scoped to."],
    ),
    organization_id=SpecField(
        type=FieldType.string,
        description=["ID of the organization where the connection is scoped to."],
    ),
)

specdoc_examples = [
    """
- name: Gather information about all connection in a project
  hosts: localhost
  tasks:
      - equinix.cloud.metal_connection_info:
          project_id: "2a5122b9-c323-4d5c-b53c-9ad3f54273e7"
"""
]

return_values = [
  {
    "id": "31d3ae8b-bd5a-41f3-a420-055211345cc7",
    "name": "my_test_connection",
    "project_id": "845b45a3-c565-47e5-b9b6-a86204a73d29",
    "type": "dedicated",
    "redundancy": "primary",
    "speed": "50Mbps",
    "metro": "am",
  }
]

SPECDOC_META = getSpecDocMeta(
    short_description="Gather information about Interconnections",
    description=("Gather information about Interconnections"),
    examples=specdoc_examples,
    options=module_spec,
    return_values={
        "resources": SpecReturnValue(
            description="Found resources",
            type=FieldType.dict,
            sample=return_values,
        ),
    },
)


def main():
    module = EquinixModule(
        argument_spec=SPECDOC_META.ansible_spec,
        is_info=True,
        required_one_of=[("project_id", "organization_id")],
    )
    try:
        module.params_syntax_check()
        connection_submodule = "metal_connection_project" if module.params.get("project_id") else "metal_connection_organization"
        return_value = {"resources": module.get_list(connection_submodule)}
    except Exception as e:
        tr = traceback.format_exc()
        module.fail_json(msg=to_native(e), exception=tr)
    module.exit_json(**return_value)


if __name__ == "__main__":
    main()
